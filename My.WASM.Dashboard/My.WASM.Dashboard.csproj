<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

	<PropertyGroup>
		<TargetFramework>net7.0</TargetFramework>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<ServiceWorkerAssetsManifest>service-worker-assets.js</ServiceWorkerAssetsManifest>
		<UserSecretsId>eaa6fdce-2066-488d-9a7b-82c6030e4ff3</UserSecretsId>
		<JsLibRoot>JsBundle\</JsLibRoot>
		<!--<DefaultItemExcludes>$(DefaultItemExcludes);$(JsLibRoot)node_modules\**</DefaultItemExcludes>-->
	</PropertyGroup>

	<Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk.BlazorWebAssembly" />

	<PropertyGroup>
		<BuildDependsOn>
			CustomBeforeBuild;$(BuildDependsOn)
		</BuildDependsOn>

		<CleanDependsOn>
			$(CleanDependsOn);CustomClean
		</CleanDependsOn>
	</PropertyGroup>


	<Target Name="CustomBeforeBuild">
		<!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
		<Exec WorkingDirectory="$(JsLibRoot)" Command="npm install" />
		<Exec WorkingDirectory="$(JsLibRoot)" Command="npm run build" />
	</Target>

	<Target Name="CustomClean">
		<ItemGroup>
			<_NodeModules Include="$(JsLibRoot)node_modules" />
		</ItemGroup>
		<RemoveDir Directories="@(_NodeModules)" ContinueOnError="true" />
	</Target>

	<ItemGroup>
		<None Include="..\.dockerignore" Link=".dockerignore">
			<DependentUpon>$(DockerDefaultDockerfile)</DependentUpon>
		</None>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="7.0.0" />
		<PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" Version="7.0.0" PrivateAssets="all" />
		<PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.Authentication" Version="7.0.0" />
		<PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.17.0" />
		<PackageReference Include="Microsoft.Web.LibraryManager.Build" Version="2.1.175" />
	</ItemGroup>

	<ItemGroup>
		<ServiceWorker Include="wwwroot\service-worker.js" PublishedContent="wwwroot\service-worker.published.js" />
	</ItemGroup>


	<!--<Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(JsLibRoot)node_modules') ">
		--><!-- Ensure Node.js is installed --><!--
		<Exec Command="node - -version" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
		<Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
		<Exec WorkingDirectory="$(JsLibRoot)" Command="npm install" />
		<Exec WorkingDirectory="$(JsLibRoot)" Command="npm run build" />
	</Target>


	<Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
		--><!-- As part of publishing, ensure the JS resources are freshly built in production mode --><!--
		<Exec WorkingDirectory="$(JsLibRoot)" Command="npm install" />
		<Exec WorkingDirectory="$(JsLibRoot)" Command="npm run build" />
	</Target>
	
	<Target Name="CustomClean" AfterTargets="Clean">
		<Delete Files="$(JsLibRoot)node_modules" ContinueOnError="true" />
		<Delete Files="wwwroot\js\mybundle.js" ContinueOnError="true" />
	</Target>-->

	<ItemGroup>
		<Content Remove="$(JsLibRoot)**" />
		<None Remove="$(JsLibRoot)**" />
		<None Include="$(JsLibRoot)**" Exclude="$(JsLibRoot)node_modules\**" />
	</ItemGroup>

	<ItemGroup>
	  <Content Update="wwwroot\d3\d3.js">
	    <CopyToOutputDirectory>Always</CopyToOutputDirectory>
	  </Content>
	  <Content Update="wwwroot\d3\d3.min.js">
	    <CopyToOutputDirectory>Always</CopyToOutputDirectory>
	  </Content>
	</ItemGroup>

	<ItemGroup>
	  <Folder Include="wwwroot\bundle\" />
	</ItemGroup>

</Project>
